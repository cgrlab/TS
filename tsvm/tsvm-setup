#!/bin/bash
# Copyright (C) 2014 Life Technologies Inc. All Rights Reserved
#
# Wrapper script to configure the TS-VM
#
set -e
DEBUG=false      # Set to false for deployment
#Defines $LATEST and $VER_AVAIL
WHERE=$(dirname $(readlink -f $0))
source ${WHERE}/tsvm-versions > /dev/null
SELECTMAX=${#VER_AVAIL[@]}
INTERACTIVE=true
DO_IMPORT=true
BASIC_SERVER=false
DIST=trusty
EXTERNAL=${EXTERNAL-"0"}

#=======================================================================
# Common variables
#=======================================================================
source ${WHERE}/tsvm-include

#=============================================================================
# Functions
#=============================================================================
function on_intranet
{
    host updates.ite > /dev/null
    if [[ "$EXTERNAL" != "0" ]]; then
        false
    fi
    return $?
}

function user_msg
{
    if $INTERACTIVE; then
        echo "$1"
    fi
}

function outbound_net_port()
{
    port=$(/sbin/route | grep ^default | awk '{print $8}')
    if [[ ! -z $port ]]; then
        echo $port
    fi
}
#=============================================================================
# BEGIN MAIN
#=============================================================================
trap 'echo -n "Error" >&1; rm -f ${WHERE}/.provisioning' ERR
trap 'rm -f ${WHERE}/.provisioning' 0
#=============================================================================
#Check for arguments
#=============================================================================
while [ $# != 0 ]; do
    case ${1,,} in
        '--version')
            shift
            VERSION=${1}
            INTERACTIVE=false
        ;;
        '--skip-import')
            DO_IMPORT=false
        ;;
        '--simple')
            DO_IMPORT=false
            BASIC_SERVER=true
        ;;
        *)
            echo "Invalid parameter: ${1}"
            exit
        ;;
    esac
    shift
done

#=============================================================================
# Is BIOS VM enabled
#=============================================================================
if $INTERACTIVE; then
    echo "Checking BIOS virtualization setting"
    sudo ${WHERE}/tsvm-isvtenabled
fi

#=============================================================================
# Validate the version string
#=============================================================================
if [ ! -z ${VERSION} ]; then
    invalid=true
    for item in ${VER_AVAIL[@]}; do
        if [[ "$item" == "$VERSION" ]]; then
            invalid=false
            break
        fi
    done
    if ${invalid}; then
        echo -n "$VERSION is not a valid version" >&2
        echo -n "Error" >&1
        user_msg "Choose one of ${VER_AVAIL[@]}"
        exit
    fi
fi

#=============================================================================
# Get the TS version to install
# Dynamic menu populated with contents of VER_AVAIL list
#=============================================================================
while [ -z ${VERSION} ]; do
    clear
    echo
    echo "Torrent Server - Virtual Machine Configuration"
    echo
    echo -e "Choose Torrent Suite Version to install in VM:"
    echo
    CNT=1
    for item in ${VER_AVAIL[@]}; do
        echo -e "\t$CNT) $item"
        CNT=$((CNT+=1))
    done
    echo -e "\t--------------------"
    echo -e "\tE) Exit"
    echo

    read -p "Enter a number: " answer
    if [[ "$answer" = "E" ]] || [[ "$answer" = "e" ]]; then
        exit
    fi
    if [[ $answer -gt 0 ]] && [[ $answer -le $SELECTMAX ]]; then
        VERSION=${VER_AVAIL[$((answer-=1))]}
        break
    else
        echo "Invalid choice: $answer"
    fi
done

if ${INTERACTIVE}; then
    echo "You have chosen $VERSION"
    read -p "Is this correct? (N|y) " answer
    case $answer in
        'Y'|'y')
            :
        ;;
        *)
            exit
        ;;
    esac

    echo "Starting Virtual Machine configuration with TS $VERSION"
fi

#=============================================================================
# Edit VagrantFile to specify apt repository corresponding with chosen version
#=============================================================================
if on_intranet; then
    URL_LOCATION=updates.ite
    #URL_LOCATION=updates.itw
    #URL_LOCATION=updates.cbd
else
    URL_LOCATION=ionupdates.com
fi
# NOTE: Using comma as delimiter in the sed statement.
sed -i "s,BOX_URL = .*,BOX_URL = \"$URL_LOCATION\"," ${WHERE}/Vagrantfile
sed -i "s,ION_APT =.*,ION_APT = \"deb http://$URL_LOCATION/updates/software/archive/$VERSION ${DIST}/\"," ${WHERE}/Vagrantfile
sed -i "s,TS_VERSION =.*,TS_VERSION = '$VERSION'," ${WHERE}/Vagrantfile
sed -i "s,DIST =.*,DIST = '$DIST'," ${WHERE}/Vagrantfile

if on_intranet && [ ${VERSION} = ${LATEST} ]; then
    sed -i "s,ION_APT =.*,ION_APT = \"deb http://$URL_LOCATION/updates/software/ ${DIST}-beta/\"," ${WHERE}/Vagrantfile
fi

if ${BASIC_SERVER}; then STR_BS='true'; else STR_BS='false';fi
sed -i "s,BASIC_SERVER.*,BASIC_SERVER = $STR_BS," ${WHERE}/Vagrantfile

sed -i "s,^default_router.*,default_router = \'$(netstat -rn|awk '/^0.0.0.0/{printf $2;exit;}')\'," ${WHERE}/Vagrantfile

# Define outbound ethernet port
PORT=$(outbound_net_port)
sed -i "s/^OUTBOUND.*/OUTBOUND_PORT = \'${PORT}\'/" ${WHERE}/Vagrantfile

#=============================================================================
#=============================================================================
if ! ${DEBUG}; then

    #=============================================================================
    # Prepare the existing Reports on the host system to be available for Import into VM.
    #=============================================================================
    if $DO_IMPORT && [ -e ${WHERE}/serialize_runs_to_json.py ]; then
        user_msg "Preparing local Reports to be available for import into the TS-VM"
        ${WHERE}/serialize_runs_to_json.py >/dev/null || true
    else
        user_msg "Only raw data sets will be available for import."
        user_msg "Run this command to enable importing Basecaller Input datasets:"
        user_msg "  ${WHERE}/serialize_runs_to_json.py"
    fi

    #=============================================================================
    # Enable firewall rule to allow NFS to the TS-VM
    #=============================================================================
    sudo ${WHERE}/tsvm-enable-nfs-rule

    #=============================================================================
    # Create secure key
    #=============================================================================
    KEY_FILE=.vagrant_key_rsa
    if [ -r $KEY_FILE ]; then
        rm -f ${KEY_FILE} ${KEY_FILE}.pub
    fi
    ssh-keygen -t rsa -N "" -f $KEY_FILE 2>/dev/null 1>&2
    
    #=============================================================================
    # Detect if a VM has already been created
    # Possible names:
    # "tsvm_default_<timestamp>"
    # "TS-VM-<version>" ie, TS-VM-4.1
    #=============================================================================
    IFS=$'\n'
    vms=( $(VBoxManage list vms) )
    for vm in ${vms[@]}; do
        vm_name=$(echo ${vms[@]}|awk '{print $1}'|sed 's/"//g')
        if [[ "${vm_name:0:12}" == "tsvm_default" ]] || [[ "${vm_name}" == "TS-VM-$VERSION" ]]; then
            user_msg "$vm_name is a TS-VM."
            #=====================================================================
            # Potential states:
            # running
            # saved
            # powered off
            # aborted
            # teleported
            # paused
            # guru meditation
            # live snapshotting
            # teleporting
            # starting
            # stopping
            # Source: https://forums.virtualbox.org/viewtopic.php?f=7&t=29828
            # Also found:
            # saving
            # restoring
            #=====================================================================
            vm_state="$(VBoxManage showvminfo $vm_name|grep ^State|sed -r 's/.*:\s*(.*)\(.*/\1/')"
            user_msg "$vm_name is $vm_state"
        else
            user_msg "$vm_name is someone else's VM."
        fi
    done
    unset $IFS
    touch ${WHERE}/.provisioning
    user_msg "Running: vagrant up && vagrant provision"
    user_msg "This can take 30 minutes or longer"
    VBoxManage setproperty machinefolder $TSVM_MACHINE_FOLDER
    #Rotate the log files
    rotate_this_pile ${PROVISION_LOG}
    rotate_this_pile ${RUNNING_LOG}
    echo $(date +"[%Y-%m-%d %H:%M:%S]") "Running: vagrant up" >>${PROVISION_LOG}
    cd ${WHERE}
    touch ${PROVISION_LOG}
    if ${INTERACTIVE}; then
        vagrant --provision up  2>&1 | tee -a ${PROVISION_LOG}
    else
        vagrant --provision up  >>${PROVISION_LOG} 2>&1
    fi
#    echo $(date +"[%Y-%m-%d %H:%M:%S]") "Running: vagrant provision" >>$PROVISION_LOG
#    if $INTERACTIVE; then
#        vagrant provision 2>&1 | tee -a $PROVISION_LOG
#    else
#        vagrant provision >>$PROVISION_LOG 2>&1
#    fi
    user_msg "Complete.  Check /var/log/ion/provisioning.log for details"
    rm -f ${WHERE}/.provisioning
else
    echo -n "Error" >&1
    echo -n 'In DEBUG mode, so did not configure VM' >&2
    user_msg '*would have* run: vagrant --provision up'
    user_msg 'if DEBUG was not enabled.'
fi

# -*- mode: ruby -*-
# vi: set ft=ruby :

# Get Host's hostname
require 'socket'
host = Socket.gethostname

# Get Hosts' timezone
timezone = ''
File.open('/etc/timezone', 'r') do |f1|
  timezone = f1.gets.chomp
end

# Get TS version (edited by tsvm-setup script)
TS_VERSION = '4.1'

# Set to false to use vboxsf filesystem mounting
NFS = false

# Set to false to disable install of Ion Torrent Suite
INSTALL_ION = true

# Set to true to setup simple server (edited by tsvm-setup script)
BASIC = false

# (edited by tsvm-setup script)
OUTBOUND_PORT = 'eth0'

# set this to the IP address of your LAN's router (edited by tsvm-setup script)
default_router = '8.8.8.8'

# Set this to the ubuntu distribution version
DIST = 'trusty'

# generate a serial number from the host
SERIAL_NUMBER = `sudo dmidecode -s system-serial-number` + 'VM'

# Vagrantfile API/syntax version. Don't touch unless you know what you're doing!
VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  config.vm.box = DIST+"64_TS"
  BOX_URL = "ionupdates.com"

  # Ion Torrent box
  config.vm.box_url = "http://" + BOX_URL + "/boxes/"+DIST+"64_TS.box"
  config.ssh.username = 'ionadmin'
  config.ssh.private_key_path = ["./.vagrant_key_rsa","./.private_key_rsa"]
  config.vm.provision "shell", inline: <<-SCRIPT
    printf "%s\n" "#{File.read("./.vagrant_key_rsa.pub")}" > /home/ionadmin/.ssh/authorized_keys
    chown -R ionadmin:ionadmin /home/ionadmin/.ssh
  SCRIPT
  config.ssh.insert_key = false

  config.vm.network :forwarded_port, guest: 80, host: 8082
  config.vm.network :public_network, :bridge => OUTBOUND_PORT

  # change/ensure the default route via the local network's WAN router,
  # useful for public_network/bridged mode
  config.vm.provision :shell, :inline => "ip route delete default 2>&1 >/dev/null || true; ip route add default via #{default_router}"

  if NFS
    config.vm.network :private_network, ip: "192.168.35.10"
  end

  config.ssh.forward_agent = true

  # Disable syncing by default
  #config.vm.synced_folder ".", "/vagrant", :disabled => true

  if BASIC
    config.vm.host_name = "ts-vm-#{TS_VERSION}" ## IMPORTANT - must set hostname or postfix fails to install later
  else

    if not NFS
      # Share the host's data folders - using vboxsf
      if File.exists?("/results")
        config.vm.synced_folder "/results", "/results_host", mount_options: ["uid=33", "gid=33"]
      end
      if File.exists?("/rawdata")
        config.vm.synced_folder "/rawdata", "/rawdata_host", mount_options: ["uid=33", "gid=33"]
      end
    else
      # Share the host's data folders - using nfs
      if File.exists?("/results")
        config.vm.synced_folder "/results", "/results_host", type: "nfs"
      end
      if File.exists?("/rawdata")
        config.vm.synced_folder "/rawdata", "/rawdata_host", type: "nfs"
      end
    end

    config.vm.host_name = "ts-vm-#{host}" ## IMPORTANT - must set hostname or postfix fails to install later

  end

  config.vm.provider :virtualbox do |vb|
    # Don't boot with headless mode
    #vb.gui = true

    # Set the name of the VM for VirtualBox
    vb.customize ["modifyvm", :id, "--name", "TS-VM-#{TS_VERSION}"]

    # Use VBoxManage to customize the VM. For example to change memory:
    USABLE_RAM = 512
    vb.customize ["modifyvm", :id, "--memory", "#{USABLE_RAM}"]
    USABLE_CORES = 1
    vb.customize ["modifyvm", :id, "--cpus", "#{USABLE_CORES}"]

    vb.customize ["modifyvm", :id, "--nictype1", "virtio"]
    vb.customize ["modifyvm", :id, "--nictype2", "virtio"]
    vb.customize ["modifyvm", :id, "--acpi", "on"]
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"]  # Enable VT-x

    vb.customize ["setextradata", :id, "VBoxInternal/Devices/pcbios/0/Config/DmiSystemSerial", SERIAL_NUMBER]
  end


  # Speeds up network, avoids ipv6 connection failures
  config.vm.provision :shell, :inline => 'echo "# IPv6
  net.ipv6.conf.all.disable_ipv6 = 1
  net.ipv6.conf.default.disable_ipv6 = 1
  net.ipv6.conf.lo.disable_ipv6 = 1
  " > /etc/sysctl.d/disableipv6.conf; sysctl -p /etc/sysctl.d/disableipv6.conf'

  if INSTALL_ION
    #config.vm.provision :shell, :inline => 'apt-get update && apt-get install squid-deb-proxy-client --no-upgrade -y'
    #config.vm.provision :shell, :inline => 'echo "Acquire::http::Pipeline-Depth 0;" > /etc/apt/apt.conf.d/99hashsumerrorfix.conf' # Work around broken proxy? Avoids 'Hash Sum error'

    # SETUP APT REPOSITORY LOCATION - DEPLOY
    ION_APT = "deb http://updates.ite/updates/software/ "+DIST+"-beta/"
    config.vm.provision :shell, :inline => "echo \"" + ION_APT + "\" > /etc/apt/sources.list.d/iontorrent.list"
    # SETUP APT REPOSITORY LOCATION - DEVELOPMENT
    #config.vm.provision :shell, :inline => "echo deb http://updates.ite/updates/software "+DIST+"-alpha/ > /etc/apt/sources.list.d/iontorrent.list"
    #config.vm.provision :shell, :inline => "echo deb http://updates.ite/updates/software "+DIST+"-dev/ >> /etc/apt/sources.list.d/iontorrent.list"

    config.vm.provision :shell, :inline => 'apt-get -qq update'

    # Bootstrap server to latest release of the Ion TS Platform
    #config.vm.provision :shell, :inline => 'apt-get install build-essential python-pkg-resources --no-upgrade -y'
    config.vm.provision :shell, :inline => 'apt-get install ion-tsconfig -y --force-yes'
    config.vm.provision :shell, :path => './tsvm-prepare'
    config.vm.provision :shell, :inline => 'TSconfig --configure-server'

    config.vm.provision :shell, :path => './tsvm-postprov.sh', :args => "#{host} #{TS_VERSION} #{timezone} #{BASIC}"

    config.vm.provision :shell, :inline => 'apt-get -qq clean'
  end
end

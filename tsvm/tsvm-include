#!/bin/bash
# Copyright (C) 2014 Life Technologies Inc. All Rights Reserved
# Include file for the tsvm bash scripts
#
# User does not have these by default
PATH=$PATH:/usr/sbin:/sbin
#HOME=/home/ionadmin
HOME=/results/tsvm
TSVM_HOME=/results/tsvm
LOG_HOME=/var/log/ion
export VBOX_USER_HOME=/results/tsvm/.config/VirtualBox/
TSVM_MACHINE_FOLDER="${TSVM_HOME}/VirtualBox VMs/"
PROVISION_LOG="${LOG_HOME}/provisioning.log"
RUNNING_LOG="${LOG_HOME}/running.log"


#=============================================================================
# Functions
#=============================================================================
function rotate_this_pile ()
{
    LOG_FILESTEM="$1"
    MAX_INDEX=5
    INDEX=$MAX_INDEX
    if [[ ! -e "$LOG_FILESTEM" ]]; then
        return
    fi
    while [[ $INDEX -gt 1 ]]; do
        NEW_FILE="$LOG_FILESTEM".$INDEX
        if [[ -e $NEW_FILE ]] && [[ $MAX_INDEX -eq $INDEX ]]; then
            rm -f $NEW_FILE
        fi

        if [[ -e "$LOG_FILESTEM".$((INDEX-1)) ]]; then
            mv "$LOG_FILESTEM".$((INDEX-1)) $NEW_FILE
        fi
        INDEX=$((INDEX-1))
    done
    if [[ -e "$LOG_FILESTEM" ]]; then
        mv "$LOG_FILESTEM" "$LOG_FILESTEM".1
    fi
}

function insert_before()
{
    #
    # WARNING! This will fail for some characters, like forward-slash.
    #
	MYFILE=$1
	MYLINE="$2"
	MYKEY="$3"
    # Append MYKEY to the end of file, if its not there
	if ! grep -q -e "$MYKEY" $MYFILE; then
        echo $MYKEY >> $MYFILE
	fi
    # Insert MYLINE before MYKEY
	if ! grep -q -e "$MYLINE" $MYFILE; then
		# insert line before keyword
		sed -i "/^$MYKEY/i $MYLINE" $MYFILE
	fi
}

function outbound_net_port()
{
    port=$(/sbin/route | awk '/default/{print $8}')
    if [[ ! -z $port ]]; then
        echo $port
    fi
}
#=====================================================================
# editing /etc/iptables.custom
# Need to preserve current contents of the file while adding the lines
# required.  Methodology: Copy the contents of the section to be updated
# to a temporary file.  Copy the contents of /etc/iptables.custom to a
# temporary file while deleting the section to be updated.  Edit the section
# contents file and then append to the temporary iptables.custom file.
# Copy the new iptables.custom file to /etc/ directory.
#=====================================================================
function enable_nfs_rule()
{
    # NOTE: Now assumes that this method is called with root access
    PORT=$(outbound_net_port)
    FILE=/etc/iptables.custom
    if [ -e $FILE ]; then
        # Create the two temporary files
        TMPFILE=$(get_filter_rules $FILE)
        sed '/^*filter/,/COMMIT/d' $FILE > /tmp/iptables.custom.new
        
        # Allows NFS traffic
        LINE="-A INPUT -s 192.168.35.10 -j ACCEPT"
        insert_before "$TMPFILE" "$LINE" "COMMIT"
        insert_before "$TMPFILE" "*filter" "$LINE"  # ONLY DO THIS ONCE
        
        # Allows port forwarded traffic 8082->80
        LINE="-A INPUT -p tcp -m state --state NEW -m tcp --dport 8082 -j ACCEPT"
        insert_before "$TMPFILE" "$LINE" "COMMIT"
        
        cat $TMPFILE >> /tmp/iptables.custom.new
        rm -f $TMPFILE
        cp /tmp/iptables.custom.new $FILE
        rm /tmp/iptables.custom.new
        
        iptables-restore < /etc/iptables.rules
        iptables-restore --noflush < $FILE
    fi
}

function enable_nat_rule()
{
    PORT=$(outbound_net_port)
    FILE=/etc/iptables.custom
    if [ -r $FILE ]; then
        # Create the two temporary files
        TMPFILE=$(get_nat_rules $FILE)
        sed '/^*nat/,/COMMIT/d' $FILE > /tmp/iptables.custom.new
        
        # IP masquerade
        LINE="-A POSTROUTING -s 192.168.35.10\/24 -o $PORT -j MASQUERADE"
        insert_before "$TMPFILE" "$LINE" "COMMIT"
        insert_before "$TMPFILE" "*nat" "$LINE"  # ONLY DO THIS ONCE
        
        cat $TMPFILE >> /tmp/iptables.custom.new
        rm -f $TMPFILE
        sudo cp /tmp/iptables.custom.new $FILE
        rm /tmp/iptables.custom.new
        
        sudo iptables-restore < /etc/iptables.rules
        sudo iptables-restore --noflush < $FILE
    fi
}

#=========================================================================
# Extract *filter--->COMMIT lines from iptables rules file
#=========================================================================
function get_filter_rules()
{
    input_file=$1
    if [ -e $input_file ]; then
        TMPFILE=$(mktemp)
        sed -n '/^*filter/,/COMMIT/p' $input_file > $TMPFILE
        echo $TMPFILE
    fi
}
#=========================================================================
# Extract *nat--->COMMIT lines from iptables rules file
#=========================================================================
function get_nat_rules()
{
    input_file=$1
    if [ -e $input_file ]; then
        TMPFILE=$(mktemp)
        sed -n '/^*nat/,/COMMIT/p' $input_file > $TMPFILE
        echo $TMPFILE
    fi
}
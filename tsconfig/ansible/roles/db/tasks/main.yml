---
# file: roles/db/tasks/main.yml

- name:
  include: '../../../globals.yml'

- name: Install postgresql package
  apt: pkg=postgresql state=present

- name: Need python-psycopg2
  apt: name=python-psycopg2 state=installed force=yes

- name: Determine postgresql version string
  shell: "psql --version | grep ^psql | awk '{print $3}' | cut -f1-2 -d."
  register: psql_version

- debug: msg='Postgresql version {{ psql_version.stdout }}'


#Create config files, if they do not exist
- name: Setup postgresql cluster files
  command: /usr/bin/pg_createcluster {{ psql_version.stdout }} main
           creates=/etc/postgresql/{{ psql_version.stdout }}/main/pg_hba.conf

#-----------------------------------------------------------------------------
#Modify the configuration of postgresql
#-----------------------------------------------------------------------------
- name: Modify pg_hba.conf file
  sudo_user: postgres
  replace: dest=/etc/postgresql/{{ psql_version.stdout }}/main/pg_hba.conf
           regexp='(.*)(peer|ident|md5|ident sameuser)$'
           replace='\1trust'

- name: Modify postgresql.conf - effective_cache_size
  sudo_user: postgres
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*effective_cache_size.*'
                line='effective_cache_size = {{ effective_cache_size }}'

- name: Modify postgresql.conf - work_mem
  sudo_user: postgres
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*work_mem.*'
                line='work_mem = {{ work_mem }}'

- name: Modify postgresql.conf - commit_delay
  sudo_user: postgres
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*commit_delay.*'
                line='commit_delay = {{ commit_delay }}'

- name: Modify postgresql.conf - checkpoint_segments
  sudo_user: postgres
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*checkpoint_segments.*'
                line='checkpoint_segments = {{ checkpoint_segments }}'

# Turn on autovacuum.  See TS-10936
- name: Enable postgres autovacuum
  sudo_user: postgres
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*autovacuum =.*'
                line='autovacuum = on'

- name: Enable postgres autovacuum - track_counts enable
  sudo_user: postgres
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*track_counts =.*'
                line='track_counts = on'

# SPECIAL CASE: Only make this edit if /etc/sysctl.d/30-postgresql-shm.conf file exists
- name: Test for {{ postgres_sysctl_file }}
  stat: path="{{ postgres_sysctl_file }}"
  register: p

- name: Modify postgresql.conf - modify shared_buffers
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='.*shared_buffers.*'
                line='shared_buffers = {{ shared_buffers }}'
  when: p.stat.exists

# Special location of postgres database files for S5 TSVM
- name: Modify db filepath for S5 TSVM
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='^data_directory.*'
                line="data_directory = '/results/postgresql/{{ psql_version.stdout }}/main'"
  when: S5_virtual_guest|bool == True

# TS-10551.  Stock max connections of 100 is too low.
- name: 'postgresql.conf: Customize max_connections value'
  lineinfile: dest=/etc/postgresql/{{ psql_version.stdout }}/main/postgresql.conf
                regexp='^max_connections.*'
                line='max_connections = 150'

- name: Modify {{ postgres_sysctl_file }} - modify kernel.shmmax
  lineinfile: dest={{ postgres_sysctl_file }}
                regexp='(kernel.shmmax)(.*)'
                line='kernel.shmmax = {{ kernel_shmmax }}'
  when: p.stat.exists

- name: reload sysctl
  command: /sbin/sysctl -p {{ postgres_sysctl_file }}
  when: p.stat.exists

# Restart postgresql service
- name: Reload postgresql
  service: name=postgresql state=reloaded enabled=yes
  when: p.stat.exists

#-----------------------------------------------------------------------------
# Initialize the iondb database and default user
#-----------------------------------------------------------------------------
- name: Initialize postgresql database
  postgresql_db: name=iondb state=present
  sudo_user: postgres

- name:  Initialize ion user in database
  postgresql_user: name="ion"
                     password="ion"
                     db="iondb"
                     role_attr_flags=SUPERUSER
                     priv=ALL
                     state=present
  sudo_user: postgres

#-----------------------------------------------------------------------------
# logrotate_iondb
#-----------------------------------------------------------------------------
- name: Create db backup directory
  file: path=/results/dbase_backup state=directory mode=0755 owner=root group=root

- name: Create db backup file
  file: path=/results/dbase_backup/iondb.sql state=touch mode=0644 owner=postgres group=postgres

- name: Enable daily backups of the postgresql database
  copy: src=iondb.j2 dest=/etc/logrotate.d/iondb force=yes mode=0644 owner=root group=root

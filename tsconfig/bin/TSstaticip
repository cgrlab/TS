#!/bin/bash
# Copyright (C) 2015 Ion Torrent Systems, Inc. All Rights Reserved
# 1 - Edit /usr/share/ion-tsconfig/ansible/group_vars/all_local (create it if it does not exist)
# 2 - If cmd arg is to Remove, then change STATIC_IP: False
# 3 - Run ansible-playbook 'fileserver.yml --tags network-reset'

#
# Purpose: Configure Torrent Server primary ethernet adapter for static IP.
#
# Method: Have command line options to define required parameters - if variables
# are not defined, use prompt to get user input.
#
# Return:  Error Codes
#   0  - Success
#   1  - Unknown command line option
#   10 - User aborted
#   11 - Bad IP address
#   12 - Bad subnet netmask
#   13 - Bad network ID
#   14 - Bad broadcast IP
#   15 - Bad gateway/router IP

#--------------------------------------
# Include function definition file
#--------------------------------------
TSCONFIG_SRC_DIR='/usr/share/ion-tsconfig'
source $TSCONFIG_SRC_DIR/ts_params||source ../ts_params||true
source $TSCONFIG_SRC_DIR/ts_functions||source ../ts_functions||true

#--------------------------------------
# Functions
#--------------------------------------
function error ()
{
    local PARENT_LINENO="$1"
    local MESSAGE="${2-}"
    local CODE="${3:-1}"
    user_msg "=================================================================="
    if [[ -n $MESSAGE ]]; then
        user_msg "ERROR on or near line ${PARENT_LINENO}; ${MESSAGE}; exiting with status ${CODE}"
    else
        user_msg "ERROR on or near line ${PARENT_LINENO}; exiting with status ${CODE}"
    fi
    user_msg "\nSee file $TSCONFIG_LOG_DIR/$TSCONFIG_LOG_BASENAME for error details"
    user_msg "=================================================================="
    errmsg="ERROR: $CODE."
    if [[ -n $MESSAGE ]]; then errmsg=$errmsg" ${MESSAGE}"; fi
    errmsg=$errmsg" on line ${PARENT_LINENO}"
    log $errmsg
    exit ${CODE}
}
function network_functionality ()
{
    network_test_results=$(mktemp -t init_netstat.XXXXX)
    if network_tests $1 >> ${network_test_results}; then
        net_stat='good'
    else
        net_stat='bad'
    fi
}

function print_help ()
{
    echo
    echo "Usage: TSstaticip --ip ipaddress --nm netmask --gw gateway [option]..."
    echo -e "\nREQUIRED ARGUMENTS:"
    echo -e "\t--ip <ipaddress>              Define host IP address"
    echo -e "\t--nm <netmask>                Define subnet mask (netmask)"
    echo -e "\t--gw <gateway>                Define gateway/router IP address"
    echo -e "\nOPTIONAL ARGUMENTS:"
    echo -e "\t--nameserver <ipaddress>      Define one or more nameservers (comma delimited, no spaces)"
    echo -e "\t--search domain[,domain]...   Define one or more domains to search (comma delimited, no spaces)"
    echo -e "\t--remove, --reset             Sets up dhcp, removing any static IP settings"
    echo -e "\t--debug, -d                   Prints script commands when executing (set -x)"
    echo -e "\t--demo                        Prints what changes would be executed only.  No changes are made"
    echo -e "\t--help, -h                    Prints command line args"
    echo -e "\t--version, -v                 Prints version"
    echo
    echo "EXAMPLE USAGE:"
    echo -e "\tsudo TSstaticip --ip 10.25.3.123 --nm 255.255.255.0 --gw 10.25.3.1"
    echo
}

#--------------------------------------
# Trap exit
#--------------------------------------
trap 'error ${LINENO}' ERR

#--------------------------------------
# Default settings
#--------------------------------------
set -e
version=`echo '$Revision$'|awk '{print $2}'`
DEMO=False
REMOVE=False
CONFIG_FILENAME="${ANSIBLE_HOME}/group_vars/all_local"

# Log command line arguments
cmdline=${@}

if [ $# == 0 ]; then
    print_help
    exit
fi

# Log command line arguments
log $cmdline

#--------------------------------------
# command line argument parsing
#--------------------------------------
#---    Convert all arguments to lower case  ---#
while [ $# != 0 ]; do
    case ${1,,} in
        '--help'|'-h')
            print_help
            exit 0
        ;;
        
        '--version'|'-v')
            echo "`basename $0` version $version"
            if [ -f /opt/ion/bin/ion-tsconfig.version.env ]; then
                source /opt/ion/bin/ion-tsconfig.version.env
                IonVersionGetFullVersion ion-tsconfig
            fi
            exit 0
        ;;
        
        '--debug'|'-d')
        set -x
        ;;
        
        '--demo'|'--dry-run')
        DEMO=True
        ;;
        
        '--ip'|'-ip')
        shift
        ipaddress=$1
        if ! is_valid_ipaddress $ipaddress; then
            errmsg="Invalid IP address $ipaddress"
            echo $errmsg
            log $errmsg
            exit 11
        fi
        ;;
        
        '--nm'|'-nm')
        shift
        netmask=$1
        if ! is_valid_netmask $netmask; then
            errmsg="Invalid netmask address $netmask"
            echo $errmsg
            log $errmsg
            exit 12
        fi
        ;;
        
        '--gw'|'-gw')
        shift
        gateway=$1
        if ! is_valid_ipaddress $gateway; then
            errmsg="Invalid gateway address $gateway"
            echo $errmsg
            log $errmsg
            exit 15
        fi
        ;;
        
        '--nameserver')
        shift
        rawdns="$1"
        oldIFS=$IFS
        IFS=","
        for ip in "${rawdns[@]}"; do
            if ! is_valid_ipaddress ${ip}; then
                log "ERROR: invalid dns IP address specified:'${ip}'"
                exit 1
            fi
        done
        IFS=$oldIFS
        dnsnameserver="$(echo "$rawdns"|sed 's/,/ /g')"
        echo "${dnsnameserver[@]}"
        ;;
        
        '--search')
        shift
        dns_search=$(echo $1|sed 's/,/ /g')
        ;;
        
        '--remove'|'--reset')
        REMOVE=True
        ;;
        
        *)
        log "Unknown option: $1"
        echo "Unknown option: $1.  Exiting"
        echo "Use TSstaticip --help for options."
        exit 1
        ;;
    esac
    shift
done

#--------------------------------------
# Must be root to edit network config file
#--------------------------------------
needs_root

# Test for required inputs
if [ -z $ipaddress ] || [ -z $netmask ] || [ -z $gateway ] && [ $REMOVE = False ]; then
    errmsg="ERROR: A required input is missing.  See usage below"
    echo -e "\n$errmsg\n"
    log errmsg
    print_help
    exit 1
fi

if [ ! -r $CONFIG_FILENAME ]; then
    cp -p ${ANSIBLE_HOME}/group_vars/all $CONFIG_FILENAME
fi

#--------------------------------------
# Process a remove request first, then exit
#--------------------------------------
if [ $REMOVE == True ]; then
    #--------------------------------------
    #Remove the static IP and restore to dhcp
    #--------------------------------------
    if [ $DEMO == False ]; then
        sed -i 's/STATIC_IP:.*$/STATIC_IP: False/' $CONFIG_FILENAME
        sed -i "s/dns_nameserver:.*$/dns_nameserver:/" $CONFIG_FILENAME
    else
        echo "CMD: sed -i 's/STATIC_IP:.*$/STATIC_IP: False/' $CONFIG_FILENAME"
        echo "CMD: sed -i s/dns_nameserver:.*$/dns_nameserver:/ $CONFIG_FILENAME"
    fi
else
    #--------------------------------------
    # Set static ip settings
    #--------------------------------------
    if [ $DEMO == False ]; then
        sed -i "s/STATIC_IP:.*$/STATIC_IP: True/" $CONFIG_FILENAME
        sed -i "s/static_ip:.*$/static_ip: $ipaddress/" $CONFIG_FILENAME
        sed -i "s/static_nm:.*$/static_nm: $netmask/" $CONFIG_FILENAME
        sed -i "s/static_gw:.*$/static_gw: $gateway/" $CONFIG_FILENAME
        if [ ! -z "$dnsnameserver[@]" ]; then
            sed -i "s/dns_nameserver:.*$/dns_nameserver: $dnsnameserver/" $CONFIG_FILENAME
        fi
        if [ ! -z "$dns_search" ]; then
            sed -i "s/dns_search:.*$/dns_search: $dns_search/" $CONFIG_FILENAME
        fi
    else
        echo "CMD:sed -i 's/STATIC_IP:.*$/STATIC_IP: True/' $CONFIG_FILENAME"
        echo "CMD:sed -i 's/static_ip:.*$/static_ip: $ipaddress/' $CONFIG_FILENAME"
        echo "CMD:sed -i 's/static_nm:.*$/static_nm: $netmask/' $CONFIG_FILENAME"
        echo "CMD:sed -i 's/static_gw:.*$/static_gw: $gateway/' $CONFIG_FILENAME"
        if [ ! -z "$dnsnameserver[@]" ]; then
            echo "CMD: sed -i 's/dns_nameserver:.*$/dns_nameserver: $dnsnameserver/' $CONFIG_FILENAME"
        fi
        if [ ! -z "$dns_search" ]; then
            echo "CMD: sed -i 's/dns_search:.*$/dns_search: $dns_search/' $CONFIG_FILENAME"
        fi
    fi
fi


#-------------------------------------------------------------------------
# Run ansible playbook and restart networking
#-------------------------------------------------------------------------
if [ $DEMO == False ]; then
    cd $ANSIBLE_HOME
    ansible-playbook -i ${ANSIBLE_HOME}/${MY_HOSTS} fileserver.yml --tags network-reset --sudo
else
    echo "CMD: ansible-playbook -i ${ANSIBLE_HOME}/${MY_HOSTS} fileserver.yml --tags network-reset --sudo"
fi

exit


